;:nil:nil:nil31:nil:nil:nil11:nil(1 2 3 . 3)3:nil41043#(:t)#(:t 1)#(:t 2)#(:t :nil abc 3)33
(mu:write (preface:unless :t 1 2 (mu:fixnum+ 1 2)) mu:std-out ())
(mu:write (preface:unless :t 1) mu:std-out ())
(mu:write (preface:unless :t) mu:std-out ())
(mu:write (preface:when :t 1 2 (mu:fixnum+ 1 2)) mu:std-out ())
(mu:write (preface:when :t 1) mu:std-out ())
(mu:write (preface:when :t) mu:std-out ())
(mu:write (preface:append) mu:std-out ())
(mu:write (preface:append ()) mu:std-out ())
(mu:write (preface:append 1) mu:std-out ())
(mu:write (preface:append () 1) mu:std-out ())
(mu:write (preface:append () ()) mu:std-out ())
(mu:write (preface:append () '(1 2 3) (mu:fixnum+ 1 2)) mu:std-out ())
(mu:write (preface:funcall mu:fixnum+ 1 2) mu:std-out ())
(mu:write (preface:let* ()) mu:std-out ())
(mu:write (preface:let* ((a (mu:fixnum+ 1 2))) (mu:fixnum+ 1 a)) mu:std-out ())
(mu:write (preface:let* ((a 0)) (mu:fixnum+ 1 a)) mu:std-out ())
(mu:write (preface:let* ((a 0)) a) mu:std-out ())
(mu:write (preface:let* ((a 1) (b (mu:fixnum+ a 2))) (mu:fixnum+ a b)) mu:std-out ())
(mu:write (preface:let* ((a 1) (b (mu:fixnum+ a 2))) b) mu:std-out ())
(mu:write (preface:vector) mu:std-out ())
(mu:write (preface:vector 1) mu:std-out ())
(mu:write (preface:vector (mu:fixnum+ 1 1)) mu:std-out ())
(mu:write (preface:vector () "abc" 3) mu:std-out ())
(mu:write (preface:apply mu:fixnum+ '(1 2)) mu:std-out ())
(mu:write (preface:apply mu:fixnum+ 1 '(2)) mu:std-out ())
